{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(cartSaga);\n\nimport { all, fork, takeLatest, delay, put } from \"@redux-saga/core/effects\";\nexport default function cartSaga() {\n  var _marked, _marked2, _marked3, _marked4, _marked5, _marked6, addCartAPI, addCartAction, removeCartAction, removeAllCartAction, watchAddCart, watchRemoveCart, watchRemoveAllCart;\n\n  return _regeneratorRuntime.wrap(function cartSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          watchRemoveAllCart = function _watchRemoveAllCart() {\n            return _regeneratorRuntime.wrap(function watchRemoveAllCart$(_context6) {\n              while (1) {\n                switch (_context6.prev = _context6.next) {\n                  case 0:\n                    _context6.next = 2;\n                    return takeLatest('REMOVE_ALL_CART_REQUEST', removeAllCartAction);\n\n                  case 2:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }\n            }, _marked6);\n          };\n\n          watchRemoveCart = function _watchRemoveCart() {\n            return _regeneratorRuntime.wrap(function watchRemoveCart$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    _context5.next = 2;\n                    return takeLatest('REMOVE_CART_REQUEST', removeCartAction);\n\n                  case 2:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, _marked5);\n          };\n\n          watchAddCart = function _watchAddCart() {\n            return _regeneratorRuntime.wrap(function watchAddCart$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    _context4.next = 2;\n                    return takeLatest('ADD_CART_REQUEST', addCartAction);\n\n                  case 2:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _marked4);\n          };\n\n          removeAllCartAction = function _removeAllCartAction() {\n            return _regeneratorRuntime.wrap(function removeAllCartAction$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.prev = 0;\n                    //yield call해서 로그인 api를 실행함\n                    //const result =  yield call(addCartAPI, action.data);\n                    // yield delay(1000);\n                    console.log('remove_all');\n                    _context3.next = 4;\n                    return put({\n                      type: 'REMOVE_ALL_CART_SUCCEESS'\n                    });\n\n                  case 4:\n                    _context3.next = 10;\n                    break;\n\n                  case 6:\n                    _context3.prev = 6;\n                    _context3.t0 = _context3[\"catch\"](0);\n                    _context3.next = 10;\n                    return put({\n                      type: 'REMOVE_ALL_CART_FAILURE',\n                      data: _context3.t0.response.data\n                    });\n\n                  case 10:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _marked3, null, [[0, 6]]);\n          };\n\n          removeCartAction = function _removeCartAction(action) {\n            return _regeneratorRuntime.wrap(function removeCartAction$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _context2.prev = 0;\n                    _context2.next = 3;\n                    return put({\n                      type: 'REMOVE_CART_SUCCEESS',\n                      data: action.data\n                    });\n\n                  case 3:\n                    _context2.next = 9;\n                    break;\n\n                  case 5:\n                    _context2.prev = 5;\n                    _context2.t0 = _context2[\"catch\"](0);\n                    _context2.next = 9;\n                    return put({\n                      type: 'REMOVE_CART_FAILURE',\n                      data: _context2.t0.response.data\n                    });\n\n                  case 9:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _marked2, null, [[0, 5]]);\n          };\n\n          addCartAction = function _addCartAction(action) {\n            return _regeneratorRuntime.wrap(function addCartAction$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return put({\n                      type: 'ADD_CART_SUCCEESS',\n                      data: action.data\n                    });\n\n                  case 3:\n                    _context.next = 9;\n                    break;\n\n                  case 5:\n                    _context.prev = 5;\n                    _context.t0 = _context[\"catch\"](0);\n                    _context.next = 9;\n                    return put({\n                      type: 'ADD_CART_FAILURE',\n                      data: _context.t0.response.data\n                    });\n\n                  case 9:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _marked, null, [[0, 5]]);\n          };\n\n          addCartAPI = function _addCartAPI(data) {\n            return axios.post('/api/addCart', data); // -> 실제 서버에 요청을 보냄\n          };\n\n          _marked = /*#__PURE__*/_regeneratorRuntime.mark(addCartAction), _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(removeCartAction), _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(removeAllCartAction), _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddCart), _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemoveCart), _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemoveAllCart);\n          _context7.next = 10;\n          return all([fork(watchAddCart), fork(watchRemoveCart), fork(watchRemoveAllCart)]);\n\n        case 10:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["C:/Users/ian07/Desktop/react-fake-shop/sagas/cart.js"],"names":["cartSaga","all","fork","takeLatest","delay","put","addCartAPI","addCartAction","removeCartAction","removeAllCartAction","watchAddCart","watchRemoveCart","watchRemoveAllCart","console","log","type","data","response","action","axios","post"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, delay, put} from \"@redux-saga/core/effects\";\r\nexport default function* cartSaga(){\r\n    \r\n\r\n        function addCartAPI(data){\r\n            return axios.post('/api/addCart', data)\r\n            // -> 실제 서버에 요청을 보냄\r\n\r\n        }\r\n\r\n        function* addCartAction(action){\r\n            try{\r\n                //yield call해서 로그인 api를 실행함\r\n                //const result =  yield call(addCartAPI, action.data);\r\n                // yield delay(1000);\r\n                yield put({\r\n                    type: 'ADD_CART_SUCCEESS',\r\n                    data: action.data\r\n                });\r\n            }catch(err){\r\n                yield put({\r\n                    type: 'ADD_CART_FAILURE',\r\n                    data:err.response.data,\r\n                });\r\n            }\r\n        }\r\n        function* removeCartAction(action){\r\n            try{\r\n                //yield call해서 로그인 api를 실행함\r\n                //const result =  yield call(addCartAPI, action.data);\r\n                // yield delay(1000);\r\n                yield put({\r\n                    type: 'REMOVE_CART_SUCCEESS',\r\n                    data: action.data\r\n                });\r\n            }catch(err){\r\n                yield put({\r\n                    type: 'REMOVE_CART_FAILURE',\r\n                    data:err.response.data,\r\n                });\r\n            }\r\n        }\r\n\r\n\r\n        function* removeAllCartAction(){\r\n            try{\r\n                //yield call해서 로그인 api를 실행함\r\n                //const result =  yield call(addCartAPI, action.data);\r\n                // yield delay(1000);\r\n                console.log('remove_all');\r\n\r\n                yield put({\r\n                    type: 'REMOVE_ALL_CART_SUCCEESS',\r\n                });\r\n            }catch(err){\r\n                yield put({\r\n                    type: 'REMOVE_ALL_CART_FAILURE',\r\n                    data:err.response.data,\r\n                });\r\n            }\r\n        }\r\n\r\n        \r\n\r\n    function* watchAddCart(){\r\n        yield takeLatest('ADD_CART_REQUEST', addCartAction);\r\n    }\r\n\r\n    function* watchRemoveCart(){\r\n        yield takeLatest('REMOVE_CART_REQUEST', removeCartAction);\r\n    }\r\n\r\n    function* watchRemoveAllCart(){\r\n        yield takeLatest('REMOVE_ALL_CART_REQUEST', removeAllCartAction);\r\n    }\r\n\r\n    yield all([\r\n        fork(watchAddCart),\r\n        fork(watchRemoveCart),\r\n        fork(watchRemoveAllCart),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}