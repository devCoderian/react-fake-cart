{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from 'next-redux-wrapper'; //HYDRATE 액션임 리덕스 서버사이드 렌더링을 위한\n\nimport user from './user';\nimport cart from './cart';\nimport { combineReducers } from 'redux';\nconst initialState = {\n  user: {\n    isLogin: false,\n    user: null\n  },\n  cart: {\n    cartList: []\n  }\n};\nconst rootReducer = combineReducers({\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        console.log('HYDRATE', action);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        return state;\n    }\n  },\n  user,\n  cart\n});\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/ian07/Desktop/react-fake-shop/reducers/index.js"],"names":["HYDRATE","user","cart","combineReducers","initialState","isLogin","cartList","rootReducer","index","state","action","type","console","log","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB,C,CACA;;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,SAASC,eAAT,QAAgC,OAAhC;AAEA,MAAMC,YAAY,GAAG;AACjBH,EAAAA,IAAI,EAAC;AACDI,IAAAA,OAAO,EAAE,KADR;AAEDJ,IAAAA,IAAI,EAAE;AAFL,GADY;AAKjBC,EAAAA,IAAI,EAAC;AACDI,IAAAA,QAAQ,EAAE;AADT;AALY,CAArB;AAUA,MAAMC,WAAW,GAAGJ,eAAe,CAAC;AAChCK,EAAAA,KAAK,EAAC,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAC1B,YAAOA,MAAM,CAACC,IAAd;AACI,WAAKX,OAAL;AACIY,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,MAAvB;AACA,+CAAYD,KAAZ,GAAsBC,MAAM,CAACI,OAA7B;;AACJ;AACI,eAAOL,KAAP;AALR;AAOH,GAT+B;AAUhCR,EAAAA,IAVgC;AAWhCC,EAAAA;AAXgC,CAAD,CAAnC;AAcA,eAAeK,WAAf","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\r\n//HYDRATE 액션임 리덕스 서버사이드 렌더링을 위한\r\n\r\nimport user from './user'\r\nimport cart from './cart'\r\n\r\nimport { combineReducers } from 'redux';\r\n\r\nconst initialState = {\r\n    user:{\r\n        isLogin: false,\r\n        user: null,\r\n    },\r\n    cart:{\r\n        cartList: [],\r\n    }\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n    index:(state = {}, action) => {\r\n        switch(action.type){\r\n            case HYDRATE:\r\n                console.log('HYDRATE', action);\r\n                return { ...state, ...action.payload };\r\n            default:\r\n                return state;\r\n        }\r\n    },\r\n    user,\r\n    cart\r\n});\r\n\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}