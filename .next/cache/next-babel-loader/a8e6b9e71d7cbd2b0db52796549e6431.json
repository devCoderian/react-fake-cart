{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(productSaga);\n\nimport { all, fork, takeLatest, delay, put, call } from \"@redux-saga/core/effects\";\nimport axios from \"axios\";\nexport default function productSaga() {\n  var _marked, _marked2, loadProductAPI, loadProduct, watchLoadProduct;\n\n  return _regeneratorRuntime.wrap(function productSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          watchLoadProduct = function _watchLoadProduct() {\n            return _regeneratorRuntime.wrap(function watchLoadProduct$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _context2.next = 2;\n                    return takeLatest('LOAD_PRODUCT_REQUEST', loadProduct);\n\n                  case 2:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _marked2);\n          };\n\n          loadProduct = function _loadProduct() {\n            var result;\n            return _regeneratorRuntime.wrap(function loadProduct$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return call(loadProductAPI);\n\n                  case 3:\n                    result = _context.sent;\n                    _context.next = 6;\n                    return put({\n                      type: 'LOAD_PRODUCT_SUCCESS',\n                      data: result.data\n                    });\n\n                  case 6:\n                    _context.next = 13;\n                    break;\n\n                  case 8:\n                    _context.prev = 8;\n                    _context.t0 = _context[\"catch\"](0);\n                    console.error(_context.t0);\n                    _context.next = 13;\n                    return put({\n                      type: 'LOAD_PRODUCT_FAILURE',\n                      error: _context.t0.response.data\n                    });\n\n                  case 13:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _marked, null, [[0, 8]]);\n          };\n\n          loadProductAPI = function _loadProductAPI() {\n            return axios.get(\"https://fakestoreapi.com/products\");\n          };\n\n          _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadProduct), _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadProduct);\n          _context3.next = 6;\n          return all([fork(watchLoadProduct)]);\n\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/goman/Desktop/react-fake-cart/sagas/product.js"],"names":["productSaga","all","fork","takeLatest","delay","put","call","axios","loadProductAPI","loadProduct","watchLoadProduct","result","type","data","console","error","response","get"],"mappings":";;qDAGyBA,W;;AAHzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,KAAhC,EAAuCC,GAAvC,EAA4CC,IAA5C,QAAwD,0BAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAe,SAAUP,WAAV;AAAA,yBACFQ,cADE,EAKDC,WALC,EAsBDC,gBAtBC;;AAAA;AAAA;AAAA;AAAA;AAsBDA,UAAAA,gBAtBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBT,2BAAMP,UAAU,CAAC,sBAAD,EAAyBM,WAAzB,CAAhB;;AAvBS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKDA,UAAAA,WALC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOU,2BAAMH,IAAI,CAACE,cAAD,CAAV;;AAPV;AAOCG,oBAAAA,MAPD;AAAA;AAQL,2BAAMN,GAAG,CAAC;AACRO,sBAAAA,IAAI,EAAE,sBADE;AAERC,sBAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,qBAAD,CAAT;;AARK;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaLC,oBAAAA,OAAO,CAACC,KAAR;AAbK;AAcL,2BAAMV,GAAG,CAAC;AACRO,sBAAAA,IAAI,EAAE,sBADE;AAERG,sBAAAA,KAAK,EAAE,YAAIC,QAAJ,CAAaH;AAFZ,qBAAD,CAAT;;AAdK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AACFL,UAAAA,cADE,8BACc;AACrB,mBAAOD,KAAK,CAACU,GAAN,qCAAP;AACH,WAHU;;AAAA,0DAKDR,WALC,oDAsBDC,gBAtBC;AAAA;AA0BX,iBAAMT,GAAG,CAAC,CACNC,IAAI,CAACQ,gBAAD,CADE,CAAD,CAAT;;AA1BW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, takeLatest, delay, put, call } from \"@redux-saga/core/effects\";\r\nimport axios from \"axios\";\r\n\r\nexport default function* productSaga(){\r\n    function loadProductAPI(){\r\n        return axios.get(`https://fakestoreapi.com/products`);\r\n    }\r\n\r\n    function* loadProduct() {\r\n        try {\r\n          const result = yield call(loadProductAPI);\r\n          yield put({\r\n            type: 'LOAD_PRODUCT_SUCCESS',\r\n            data: result.data,\r\n          });\r\n        } catch (err) {\r\n          console.error(err);\r\n          yield put({\r\n            type: 'LOAD_PRODUCT_FAILURE',\r\n            error: err.response.data,\r\n          });\r\n        }\r\n      }\r\n\r\n      \r\n    function* watchLoadProduct(){\r\n      yield takeLatest('LOAD_PRODUCT_REQUEST', loadProduct);\r\n    }\r\n\r\n    yield all([\r\n        fork(watchLoadProduct)\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}