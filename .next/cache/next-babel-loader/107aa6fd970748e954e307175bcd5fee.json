{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, takeLatest, put, delay } from \"@redux-saga/core/effects\";\nexport default function userSaga() {\n  var _marked, _marked2, _marked3, _marked4, logInAPI, logIn, logOutAPI, logOut, watchLogin, watchLogout;\n\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          watchLogout = function _watchLogout() {\n            return _regeneratorRuntime.wrap(function watchLogout$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    _context4.next = 2;\n                    return takeLatest('LOG_OUT_REQUEST', logOut);\n\n                  case 2:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _marked4);\n          };\n\n          watchLogin = function _watchLogin() {\n            return _regeneratorRuntime.wrap(function watchLogin$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.next = 2;\n                    return takeLatest('LOG_IN_REQUEST', logIn);\n\n                  case 2:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _marked3);\n          };\n\n          logOut = function _logOut(action) {\n            return _regeneratorRuntime.wrap(function logOut$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _context2.prev = 0;\n                    _context2.next = 3;\n                    return delay(1000);\n\n                  case 3:\n                    _context2.next = 5;\n                    return put({\n                      type: 'LOG_OUT_SUCCESS',\n                      data: result.data\n                    });\n\n                  case 5:\n                    _context2.next = 11;\n                    break;\n\n                  case 7:\n                    _context2.prev = 7;\n                    _context2.t0 = _context2[\"catch\"](0);\n                    _context2.next = 11;\n                    return put({\n                      type: 'LOG_OUT_FAILURE',\n                      data: _context2.t0.response.data\n                    });\n\n                  case 11:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _marked2, null, [[0, 7]]);\n          };\n\n          logOutAPI = function _logOutAPI() {\n            return axios.post('/api/logout'); // -> 실제 서버에 요청을 보냄\n          };\n\n          logIn = function _logIn(action) {\n            return _regeneratorRuntime.wrap(function logIn$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return put({\n                      type: 'LOG_IN_SUCCESS',\n                      data: result.data\n                    });\n\n                  case 3:\n                    _context.next = 9;\n                    break;\n\n                  case 5:\n                    _context.prev = 5;\n                    _context.t0 = _context[\"catch\"](0);\n                    _context.next = 9;\n                    return put({\n                      type: 'LOG_IN_FAILURE',\n                      data: _context.t0.response.data\n                    });\n\n                  case 9:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _marked, null, [[0, 5]]);\n          };\n\n          logInAPI = function _logInAPI(data) {\n            return axios.post('/api/login', data); // -> 실제 서버에 요청을 보냄\n          };\n\n          _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn), _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut), _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin), _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogout);\n          _context5.next = 9;\n          return all([fork(watchLogin), fork(watchLogout)]);\n\n        case 9:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/goman/Desktop/react-fake-cart/sagas/user.js"],"names":["userSaga","all","fork","takeLatest","put","delay","logInAPI","logIn","logOutAPI","logOut","watchLogin","watchLogout","action","type","data","result","response","axios","post"],"mappings":";;qDACyBA,Q;;AADzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,KAArC,QAAiD,0BAAjD;AACA,eAAe,SAAUL,QAAV;AAAA,6CAOFM,QAPE,EAaDC,KAbC,EA+BFC,SA/BE,EAqCDC,MArCC,EAwDDC,UAxDC,EA8DDC,WA9DC;;AAAA;AAAA;AAAA;AAAA;AA8DDA,UAAAA,WA9DC;AAAA;AAAA;AAAA;AAAA;AAAA;AA+DP,2BAAMR,UAAU,CAAC,iBAAD,EAAoBM,MAApB,CAAhB;;AA/DO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAwDDC,UAAAA,UAxDC;AAAA;AAAA;AAAA;AAAA;AAAA;AA2DP,2BAAMP,UAAU,CAAC,gBAAD,EAAmBI,KAAnB,CAAhB;;AA3DO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqCDE,UAAAA,MArCC,oBAqCMG,MArCN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyCH,2BAAMP,KAAK,CAAC,IAAD,CAAX;;AAzCG;AAAA;AA0CH,2BAAMD,GAAG,CAAC;AACNS,sBAAAA,IAAI,EAAE,iBADA;AAENC,sBAAAA,IAAI,EAAEC,MAAM,CAACD;AAFP,qBAAD,CAAT;;AA1CG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AA+CH,2BAAMV,GAAG,CAAC;AACNS,sBAAAA,IAAI,EAAE,iBADA;AAENC,sBAAAA,IAAI,EAAC,aAAIE,QAAJ,CAAaF;AAFZ,qBAAD,CAAT;;AA/CG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA+BFN,UAAAA,SA/BE,yBA+BS;AAChB,mBAAOS,KAAK,CAACC,IAAN,CAAW,aAAX,CAAP,CADgB,CAEhB;AAEH,WAnCU;;AAaDX,UAAAA,KAbC,mBAaKK,MAbL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBH,2BAAMR,GAAG,CAAC;AACNS,sBAAAA,IAAI,EAAE,gBADA;AAENC,sBAAAA,IAAI,EAAEC,MAAM,CAACD;AAFP,qBAAD,CAAT;;AAnBG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAwBH,2BAAMV,GAAG,CAAC;AACNS,sBAAAA,IAAI,EAAE,gBADA;AAENC,sBAAAA,IAAI,EAAC,YAAIE,QAAJ,CAAaF;AAFZ,qBAAD,CAAT;;AAxBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOFR,UAAAA,QAPE,sBAOOQ,IAPP,EAOY;AACnB,mBAAOG,KAAK,CAACC,IAAN,CAAW,YAAX,EAAyBJ,IAAzB,CAAP,CADmB,CAEnB;AAEH,WAXU;;AAAA,0DAaDP,KAbC,oDAqCDE,MArCC,oDAwDDC,UAxDC,oDA8DDC,WA9DC;AAAA;AAkEX,iBAAMV,GAAG,CAAC,CACNC,IAAI,CAACQ,UAAD,CADE,EAENR,IAAI,CAACS,WAAD,CAFE,CAAD,CAAT;;AAlEW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, takeLatest, put, delay} from \"@redux-saga/core/effects\";\r\nexport default function* userSaga(){\r\n\r\n    // const l = login({type: 'LOG_IN_REQUEST', data: {id:'ian'}})\r\n    // l.next(); ->  const result =  yield call(loginApi, action.data);여기까지 실행\r\n    // l.next(); yield put 실행\r\n    // generate를 쓰면 테스트하기 쉽다. \r\n\r\n    function logInAPI(data){\r\n        return axios.post('/api/login', data)\r\n        // -> 실제 서버에 요청을 보냄\r\n\r\n    }\r\n\r\n    function* logIn(action){\r\n        try{\r\n            //yield call해서 로그인 api를 실행함\r\n            //yield call(loginApi, action.data); === loginApi(action.data)\r\n            //const result =  yield call(logInAPI, action.data);\r\n            //yield delay(1000);\r\n            yield put({\r\n                type: 'LOG_IN_SUCCESS',\r\n                data: result.data\r\n            });\r\n        }catch(err){\r\n            yield put({\r\n                type: 'LOG_IN_FAILURE',\r\n                data:err.response.data,\r\n            });\r\n        }\r\n    }\r\n\r\n    function logOutAPI(){\r\n        return axios.post('/api/logout')\r\n        // -> 실제 서버에 요청을 보냄\r\n\r\n    }\r\n\r\n    function* logOut(action){\r\n        try{\r\n            //yield call해서 로그인 api를 실행함\r\n            //const result =  yield call(logOutAPI);\r\n            yield delay(1000);\r\n            yield put({\r\n                type: 'LOG_OUT_SUCCESS',\r\n                data: result.data\r\n            });\r\n        }catch(err){\r\n            yield put({\r\n                type: 'LOG_OUT_FAILURE',\r\n                data:err.response.data,\r\n            });\r\n        }\r\n    }\r\n\r\n    \r\n    //이벤트 리스너 같은 애들\r\n    function* watchLogin(){\r\n        //비동기 액션 크리에이터\r\n        //로그인이라는 액션이 들어오면 로그인 제너레이터를 실행하도록 이벤트 리스너 역할을 한다.\r\n        yield takeLatest('LOG_IN_REQUEST', logIn);\r\n        //로그인관련 데이터에 대한 액션이 logIn함수에 매개변수로 전달된다.\r\n    }\r\n    function* watchLogout(){\r\n        yield takeLatest('LOG_OUT_REQUEST', logOut);\r\n    }\r\n\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchLogout)\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}