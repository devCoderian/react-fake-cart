{"ast":null,"code":"import { all, fork, takeLatest, put, delay } from \"@redux-saga/core/effects\";\nexport default function* userSaga() {\n  // const l = login({type: 'LOG_IN_REQUEST', data: {id:'ian'}})\n  // l.next(); ->  const result =  yield call(loginApi, action.data);여기까지 실행\n  // l.next(); yield put 실행\n  // generate를 쓰면 테스트하기 쉽다. \n  function logInAPI(data) {\n    return axios.post('/api/login', data); // -> 실제 서버에 요청을 보냄\n  }\n\n  function* logIn(action) {\n    try {\n      //yield call해서 로그인 api를 실행함\n      //yield call(loginApi, action.data); === loginApi(action.data)\n      //const result =  yield call(logInAPI, action.data);\n      //yield delay(1000);\n      yield put({\n        type: 'LOG_IN_SUCCESS',\n        data: action.data\n      });\n    } catch (err) {\n      yield put({\n        type: 'LOG_IN_FAILURE',\n        data: err.response.data\n      });\n    }\n  }\n\n  function logOutAPI() {\n    return axios.post('/api/logout'); // -> 실제 서버에 요청을 보냄\n  }\n\n  function* logOut(action) {\n    try {\n      //yield call해서 로그인 api를 실행함\n      //const result =  yield call(logOutAPI);\n      //yield delay(1000);\n      yield put({\n        type: 'LOG_OUT_SUCCESS',\n        data: result.data\n      });\n    } catch (err) {\n      yield put({\n        type: 'LOG_OUT_FAILURE',\n        data: err.response.data\n      });\n    }\n  } //이벤트 리스너 같은 애들\n\n\n  function* watchLogin() {\n    //비동기 액션 크리에이터\n    //로그인이라는 액션이 들어오면 로그인 제너레이터를 실행하도록 이벤트 리스너 역할을 한다.\n    yield takeLatest('LOG_IN_REQUEST', logIn); //로그인관련 데이터에 대한 액션이 logIn함수에 매개변수로 전달된다.\n  }\n\n  function* watchLogout() {\n    yield takeLatest('LOG_OUT_REQUEST', logOut);\n  }\n\n  yield all([fork(watchLogin), fork(watchLogout)]);\n}","map":{"version":3,"sources":["C:/Users/goman/Desktop/react-fake-cart/sagas/user.js"],"names":["all","fork","takeLatest","put","delay","userSaga","logInAPI","data","axios","post","logIn","action","type","err","response","logOutAPI","logOut","result","watchLogin","watchLogout"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,KAArC,QAAiD,0BAAjD;AACA,eAAe,UAAUC,QAAV,GAAoB;AAE/B;AACA;AACA;AACA;AAEA,WAASC,QAAT,CAAkBC,IAAlB,EAAuB;AACnB,WAAOC,KAAK,CAACC,IAAN,CAAW,YAAX,EAAyBF,IAAzB,CAAP,CADmB,CAEnB;AAEH;;AAED,YAAUG,KAAV,CAAgBC,MAAhB,EAAuB;AACnB,QAAG;AACC;AACA;AACA;AACA;AACA,YAAMR,GAAG,CAAC;AACNS,QAAAA,IAAI,EAAE,gBADA;AAENL,QAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,OAAD,CAAT;AAIH,KATD,CASC,OAAMM,GAAN,EAAU;AACP,YAAMV,GAAG,CAAC;AACNS,QAAAA,IAAI,EAAE,gBADA;AAENL,QAAAA,IAAI,EAACM,GAAG,CAACC,QAAJ,CAAaP;AAFZ,OAAD,CAAT;AAIH;AACJ;;AAED,WAASQ,SAAT,GAAoB;AAChB,WAAOP,KAAK,CAACC,IAAN,CAAW,aAAX,CAAP,CADgB,CAEhB;AAEH;;AAED,YAAUO,MAAV,CAAiBL,MAAjB,EAAwB;AACpB,QAAG;AACC;AACA;AACA;AACA,YAAMR,GAAG,CAAC;AACNS,QAAAA,IAAI,EAAE,iBADA;AAENL,QAAAA,IAAI,EAAEU,MAAM,CAACV;AAFP,OAAD,CAAT;AAIH,KARD,CAQC,OAAMM,GAAN,EAAU;AACP,YAAMV,GAAG,CAAC;AACNS,QAAAA,IAAI,EAAE,iBADA;AAENL,QAAAA,IAAI,EAACM,GAAG,CAACC,QAAJ,CAAaP;AAFZ,OAAD,CAAT;AAIH;AACJ,GApD8B,CAuD/B;;;AACA,YAAUW,UAAV,GAAsB;AAClB;AACA;AACA,UAAMhB,UAAU,CAAC,gBAAD,EAAmBQ,KAAnB,CAAhB,CAHkB,CAIlB;AACH;;AACD,YAAUS,WAAV,GAAuB;AACnB,UAAMjB,UAAU,CAAC,iBAAD,EAAoBc,MAApB,CAAhB;AACH;;AAED,QAAMhB,GAAG,CAAC,CACNC,IAAI,CAACiB,UAAD,CADE,EAENjB,IAAI,CAACkB,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { all, fork, takeLatest, put, delay} from \"@redux-saga/core/effects\";\r\nexport default function* userSaga(){\r\n\r\n    // const l = login({type: 'LOG_IN_REQUEST', data: {id:'ian'}})\r\n    // l.next(); ->  const result =  yield call(loginApi, action.data);여기까지 실행\r\n    // l.next(); yield put 실행\r\n    // generate를 쓰면 테스트하기 쉽다. \r\n\r\n    function logInAPI(data){\r\n        return axios.post('/api/login', data)\r\n        // -> 실제 서버에 요청을 보냄\r\n\r\n    }\r\n\r\n    function* logIn(action){\r\n        try{\r\n            //yield call해서 로그인 api를 실행함\r\n            //yield call(loginApi, action.data); === loginApi(action.data)\r\n            //const result =  yield call(logInAPI, action.data);\r\n            //yield delay(1000);\r\n            yield put({\r\n                type: 'LOG_IN_SUCCESS',\r\n                data: action.data\r\n            });\r\n        }catch(err){\r\n            yield put({\r\n                type: 'LOG_IN_FAILURE',\r\n                data:err.response.data,\r\n            });\r\n        }\r\n    }\r\n\r\n    function logOutAPI(){\r\n        return axios.post('/api/logout')\r\n        // -> 실제 서버에 요청을 보냄\r\n\r\n    }\r\n\r\n    function* logOut(action){\r\n        try{\r\n            //yield call해서 로그인 api를 실행함\r\n            //const result =  yield call(logOutAPI);\r\n            //yield delay(1000);\r\n            yield put({\r\n                type: 'LOG_OUT_SUCCESS',\r\n                data: result.data\r\n            });\r\n        }catch(err){\r\n            yield put({\r\n                type: 'LOG_OUT_FAILURE',\r\n                data:err.response.data,\r\n            });\r\n        }\r\n    }\r\n\r\n    \r\n    //이벤트 리스너 같은 애들\r\n    function* watchLogin(){\r\n        //비동기 액션 크리에이터\r\n        //로그인이라는 액션이 들어오면 로그인 제너레이터를 실행하도록 이벤트 리스너 역할을 한다.\r\n        yield takeLatest('LOG_IN_REQUEST', logIn);\r\n        //로그인관련 데이터에 대한 액션이 logIn함수에 매개변수로 전달된다.\r\n    }\r\n    function* watchLogout(){\r\n        yield takeLatest('LOG_OUT_REQUEST', logOut);\r\n    }\r\n\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchLogout)\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}