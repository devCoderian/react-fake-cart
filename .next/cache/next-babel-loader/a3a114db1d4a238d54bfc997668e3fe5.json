{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(cartSaga);\n\nimport { all, fork, takeLatest, delay, put } from \"@redux-saga/core/effects\";\nexport default function cartSaga() {\n  var _marked, _marked2, addCartAPI, addCart, watchAddCart;\n\n  return _regeneratorRuntime.wrap(function cartSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          watchAddCart = function _watchAddCart() {\n            return _regeneratorRuntime.wrap(function watchAddCart$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _context2.next = 2;\n                    return takeLatest('ADD_CART_REQUEST', addCart);\n\n                  case 2:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _marked2);\n          };\n\n          addCart = function _addCart(action) {\n            return _regeneratorRuntime.wrap(function addCart$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return delay(1000);\n\n                  case 3:\n                    _context.next = 5;\n                    return put({\n                      type: 'ADD_CART_SUCCESS',\n                      data: result.data\n                    });\n\n                  case 5:\n                    _context.next = 11;\n                    break;\n\n                  case 7:\n                    _context.prev = 7;\n                    _context.t0 = _context[\"catch\"](0);\n                    _context.next = 11;\n                    return put({\n                      type: 'ADD_CART_FAILURE',\n                      data: _context.t0.response.data\n                    });\n\n                  case 11:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _marked, null, [[0, 7]]);\n          };\n\n          addCartAPI = function _addCartAPI(data) {\n            return axios.post('/api/addCart', data); // -> 실제 서버에 요청을 보냄\n          };\n\n          _marked = /*#__PURE__*/_regeneratorRuntime.mark(addCart), _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddCart);\n          _context3.next = 6;\n          return all([fork(watchAddCart)]);\n\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/goman/Desktop/react-fake-cart/sagas/cart.js"],"names":["cartSaga","all","fork","takeLatest","delay","put","addCartAPI","addCart","watchAddCart","action","type","data","result","response","axios","post"],"mappings":";;qDACyBA,Q;;AADzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,KAAhC,EAAuCC,GAAvC,QAAkD,0BAAlD;AACA,eAAe,SAAUL,QAAV;AAAA,yBAGEM,UAHF,EASGC,OATH,EA4BDC,YA5BC;;AAAA;AAAA;AAAA;AAAA;AA4BDA,UAAAA,YA5BC;AAAA;AAAA;AAAA;AAAA;AAAA;AA6BP,2BAAML,UAAU,CAAC,kBAAD,EAAqBI,OAArB,CAAhB;;AA7BO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASGA,UAAAA,OATH,qBASWE,MATX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaC,2BAAML,KAAK,CAAC,IAAD,CAAX;;AAbD;AAAA;AAcC,2BAAMC,GAAG,CAAC;AACNK,sBAAAA,IAAI,EAAE,kBADA;AAENC,sBAAAA,IAAI,EAAEC,MAAM,CAACD;AAFP,qBAAD,CAAT;;AAdD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAmBC,2BAAMN,GAAG,CAAC;AACNK,sBAAAA,IAAI,EAAE,kBADA;AAENC,sBAAAA,IAAI,EAAC,YAAIE,QAAJ,CAAaF;AAFZ,qBAAD,CAAT;;AAnBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGEL,UAAAA,UAHF,wBAGaK,IAHb,EAGkB;AACrB,mBAAOG,KAAK,CAACC,IAAN,CAAW,cAAX,EAA2BJ,IAA3B,CAAP,CADqB,CAErB;AAEH,WAPM;;AAAA,0DASGJ,OATH,oDA4BDC,YA5BC;AAAA;AAgCX,iBAAMP,GAAG,CAAC,CACNC,IAAI,CAACM,YAAD,CADE,CAAD,CAAT;;AAhCW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, takeLatest, delay, put } from \"@redux-saga/core/effects\";\r\nexport default function* cartSaga(){\r\n    \r\n\r\n        function addCartAPI(data){\r\n            return axios.post('/api/addCart', data)\r\n            // -> 실제 서버에 요청을 보냄\r\n\r\n        }\r\n\r\n        function* addCart(action){\r\n            try{\r\n                //yield call해서 로그인 api를 실행함\r\n                //const result =  yield call(addCartAPI, action.data);\r\n                yield delay(1000);\r\n                yield put({\r\n                    type: 'ADD_CART_SUCCESS',\r\n                    data: result.data\r\n                });\r\n            }catch(err){\r\n                yield put({\r\n                    type: 'ADD_CART_FAILURE',\r\n                    data:err.response.data,\r\n                });\r\n            }\r\n        }\r\n\r\n        \r\n\r\n    function* watchAddCart(){\r\n        yield takeLatest('ADD_CART_REQUEST', addCart);\r\n    }\r\n\r\n    yield all([\r\n        fork(watchAddCart)\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}